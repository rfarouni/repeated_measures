# \n
#       Standard MLE FA (Quartimin Rotation) \n")
#   ml.quart <- factanal(covmat=dat, rotation="quartimin",
#                        factors=nf, n.obs=Ns, nstart=n.rot)
#   print(ml.quart)
#   cat("\n All Quartimin Loadings (Scaled) \n")
#   print(round(100 * loadings(ml.quart, digits=10), 0))
}
MBFA(Ns=N,nf=1, nv=c(7,7),dat=Sigma_empirical)
rbind(round(W[[1]],2),round(W[[2]],2))
install.packages("CCAGFA")
MBFA(Ns=N,nf=3, nv=c(7,7),dat=Sigma_empirical)
rbind(round(W[[1]],2),round(W[[2]],2))
linmodEst <- function(x, y)
{
## compute QR-decomposition of x
qx <- qr(x)
## compute (x’x)^(-1) x’y
coef <- solve.qr(qx, y)
## degrees of freedom and standard deviation of residuals
df <- nrow(x)-ncol(x)
sigma2 <- sum((y - x%*%coef)^2)/df
## compute sigma^2 * (x’x)^-1
vcov <- sigma2 * chol2inv(qx$qr)
colnames(vcov) <- rownames(vcov) <- colnames(x)
list(coefficients = coef,
vcov = vcov,
sigma = sqrt(sigma2),
df = df)
}
data(cats, package="MASS")
linmodEst(cbind(1, cats$Bwt), cats$Hwt)
attributes(linmodEst)
class(linmodEst)
summary(linmodEst)
linmod
UseMethod("linmod")
linmod.default <- function(x, y, ...)
{
x <- as.matrix(x)
y <- as.numeric(y)
est <- linmodEst(x, y)
est$fitted.values <- as.vector(x %*% est$coefficients)
est$residuals <- y - est$fitted.values
est$call <- match.call()
class(est) <- "linmod"
est
}
linmod <- function(x, ...) UseMethod("linmod")
fit <- linmod(cbind(1, cats$Bwt), cats$Hwt)
linmod.default <- function(x, y, ...)
{
x <- as.matrix(x)
y <- as.numeric(y)
est <- linmodEst(x, y)
est$fitted.values <- as.vector(x %*% est$coefficients)
est$residuals <- y - est$fitted.values
est$call <- match.call()
#class(est) <- "linmod"
est
}
fit <- linmod(cbind(1, cats$Bwt), cats$Hwt)
methods(fit1)
fit1 <- linmodEst(cbind(1, cats$Bwt), cats$Hwt)
methods(fit1)
attributes(fit1)
methods(fit1)
class(fit1)
attributes(linmodEst)
methods(linmodEst)
linmodEst <- function(x, y)
{
## compute QR-decomposition of x
qx <- qr(x)
## compute (x’x)^(-1) x’y
coef <- solve.qr(qx, y)
## degrees of freedom and standard deviation of residuals
df <- nrow(x)-ncol(x)
sigma2 <- sum((y - x%*%coef)^2)/df
## compute sigma^2 * (x’x)^-1
vcov <- sigma2 * chol2inv(qx$qr)
colnames(vcov) <- rownames(vcov) <- colnames(x)
list(coefficients = coef,
vcov = vcov,
sigma = sqrt(sigma2),
df = df)
}
attributes(linmodEst)
methods(linmodEst)
data(cats, package="MASS")
fit1 <- linmodEst(cbind(1, cats$Bwt), cats$Hwt)
fit1
linmod <- function(x, ...) UseMethod("linmod")
# add a default method
linmod.default <- function(x, y, ...)
{
x <- as.matrix(x)
y <- as.numeric(y)
est <- linmodEst(x, y)
est$fitted.values <- as.vector(x %*% est$coefficients)
est$residuals <- y - est$fitted.values
est$call <- match.call()
class(est) <- "linmod"
est
}
fit2 <- linmod(cbind(1, cats$Bwt), cats$Hwt)
print.linmod <- function(x, ...)
{
cat("Call:\n")
print(x$call)
cat("\nCoefficients:\n")
print(x$coefficients)
}
summary.linmod <- function(object, ...)
{
se <- sqrt(diag(object$vcov))
tval <- coef(object) / se
TAB <- cbind(Estimate = coef(object),
StdErr = se,
t.value = tval,
p.value = 2*pt(-abs(tval), df=object$df))
res <- list(call=object$call,
coefficients=TAB)
class(res) <- "summary.linmod"
res
}
fit2
summary(fit2)
install.packages("psych")
library("psych", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
class(fa)
attributes(fa)
methods(fa)
class(facanal)
class(factanal)
methods(factanal)
attributes(factanal)
factanal
y <- c(list(1, 2), c(3, 4))
as.numeric("one")
as.logical("one")
NA <2
"a" <2
c(TRUE, 1L)
c(TRUE, 1L)
c(list(1), "a")
c("a", 1)
y <- c(list(1, 2), c(3, 4))
y
as.vector(y)
unlist(y)
options(repos = c(CRAN = "https://cran.revolutionanalytics.com"))
install.packages(c("BH", "evaluate", "formatR", "ggplot2", "git2r", "lme4", "manipulate", "mnormt", "Rcpp", "RcppEigen", "RCurl", "rex", "rstan"))
setwd("~/Dropbox")
source("https://bioconductor.org/biocLite.R")
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
pkgs <- read.csv("pkgs.csv")
pkgs <- read.csv("pkgs.csv")[,2]
pkgs
pkgs <- as.character(read.csv("pkgs.csv")[,2])
pkgs
install.packages(pkgs[1])
library(BiocInstaller)
biocLite(pkgs[1])
pkgs
install.packages(pkgs[263])
biocLite(pkgs[35])
install.packages("XML")
biocLite("rtracklayer")
biocValid()
df_wide <- read.table("hdrs.txt",
header = TRUE,
na.strings = ".")
df_wide
?read.table
df_wide <- fread("hdrs.txt",
header = TRUE,
na.strings = ".")
library("dplyr")
library("data.table")
library("tidyr")
library("ggplot2")
library("nlme")
df_wide <- fread("hdrs.txt",
header = TRUE,
na.strings = ".")
df_wide
df_wide <- fread("hdrs.txt",
na.strings = ".")
df_wide
df_wide <- fread("hdrs.txt",
na.strings = ".")
df_wide
df_wide <- fread("hdrs.txt",
header=TRUE
na.strings = ".")
?gather
df_wide <- fread("hdrs.txt", na.strings = ".")
df_wide
colnames(df_wide) <- c("id",  "group", "0", "1", "2", "3",  "4", "5")
df_long <- gather(data = df_wide ,
key = "week",
value = "score",
3:8)
# change type of variables into factors
df_long  <- within(df_long, {
id <- factor(id)
week <- as.integer(week)
})
xx <-na.omit(df_long)
df_long
ggplot(data = df_long, aes(x = week , y = score, group = id)) +
geom_line(aes(colour = id), size = 0.2) +
facet_grid(. ~ group) +
xlab("Weeks") +
ylab("Rating") +
ggtitle("Data from Wells' study of learning on a power test of simple arithmetic items")
library("data.table")
library("tidyr")
library("ggplot2")
library("nlme")
library("data.table")
library("tidyr")
library("ggplot2")
library("nlme")
df_wide <- fread("hdrs.txt", na.strings = ".")
df_wide
colnames(df_wide) <- c("id",  "group", "0", "1", "2", "3",  "4", "5")
df_long <- gather(data = df_wide ,
key = "week",
value = "score",
3:8)
# change type of variables into factors
df_long  <- within(df_long, {
id <- factor(id)
week <- as.integer(week)
})
df_long
ggplot(data = df_long, aes(x = week , y = score, group = id)) +
geom_line(aes(colour = id), size = 0.2) +
facet_grid(. ~ group) +
xlab("Weeks") +
ylab("Rating") +
ggtitle(" Hamilton Depression Rating Scale scores")
ggplot(data = df_long, aes(x = week , y = score, group = id)) +
geom_line(aes(colour = id), size = 0.2) +
facet_grid(. ~ group) +
xlab("Weeks") +
ylab("Rating") +
ggtitle(" Hamilton Depression Rating Scale scores")
df_long_filtered  <- na.omit(df_long)
df_long_filtered  <- na.omit(df_long)
df_long_filtered
glsREML <- gls(rating~ week + group + week*group,
data = df_long_filtered ,
correlation = corSymm(form = ~ 1 |id),
weights = varIdent(form = ~ 1 | week),
method = "REML")
glsREML <- gls(score ~ week + group + week*group,
data = df_long_filtered ,
correlation = corSymm(form = ~ 1 |id),
weights = varIdent(form = ~ 1 | week),
method = "REML")
summary(glsREML)
getVarCov(glsREML)
glsML <- update(glsREML, method = "ML")
summary(glsML)
skodak_wide <- fread("skodak.txt", na.strings = ".")
skodak_wide
skodak_wide <- fread("skodak.txt", na.strings = ".")
skodak_wide
library("car", lib.loc="C:/Users/Rick/Documents/R/win-library/3.0")
install.packages("car")
data(Blackmoor)
data.1 <- fread("blackmoor.txt", na.strings = ".")
data.1 <- fread("/home/rick/Files/Work/Completed Courses/Repeated Measures/HW2/blackmoor.txt", na.strings = ".")
data.1$age=data.1$age-8
age.2=data.1$age^2
data.1=cbind(data.1,age.2)
df=data.1[,c(1,4,2,5,3)]
View(df)
index=as.numeric((df$group=="patient"))
df=cbind(df,df$age*index)
df$age.2=df$age.2*index
df=df[,c(1,2,3,6,4,5)]
skodak_wide <- fread("skodak.txt", na.strings = ".")
skodak_wide
?gather
skodak_long <- gather(data = skodak_wide ,
key = "occasion",
value = "age",
3:8)
View(skodak_long)
#colnames(df_wide) <- c("id",  "group", "0", "1", "2", "3",  "4", "5")
skodak_long <- gather(data = skodak_wide ,
key = "occasion",
value = "age",
3:6)
# change type of variables into factors
skodak_long  <- within(skodak_long, {
id <- factor(id)
week <- as.integer(week)
})
skodak_long <- gather(data = skodak_wide ,
key = "occasion",
value = "age",
3:6)
View(skodak_long)
View(skodak_long)
skodak_long2 <- gather(data = skodak_long  ,
key = "occasion_iq",
value = "iq",
3:6)
View(skodak_long2)
View(skodak_wide)
install.packages("reshape2")
setwd("~/Documents/repos/repeated_measures/assets/assignments/chap3")
library("data.table")
library("tidyr")
library("reshape2")
library("ggplot2")
library("nlme")
df_wide <- fread("hdrs.txt", na.strings = ".")
df_wide
colnames(df_wide) <- c("id",  "group", "0", "1", "2", "3",  "4", "5")
df_long <- gather(data = df_wide ,
key = "week",
value = "score",
3:8)
# change type of variables into factors
df_long  <- within(df_long, {
id <- factor(id)
week <- as.integer(week)
})
df_long
ggplot(data = df_long, aes(x = week , y = score, group = id)) +
geom_line(aes(colour = id), size = 0.2) +
facet_grid(. ~ group) +
xlab("Weeks") +
ylab("Rating") +
ggtitle(" Hamilton Depression Rating Scale scores")
df_long_filtered  <- na.omit(df_long)
df_long_filtered
glsREML <- gls(score ~ week + group + week*group,
data = df_long_filtered ,
correlation = corSymm(form = ~ 1 |id),
weights = varIdent(form = ~ 1 | week),
method = "REML")
summary(glsREML)
glsML <- update(glsREML, method = "ML")
summary(glsML)
skodak_wide <- fread("skodak.txt", na.strings = ".")
skodak_wide
?melt
xx <-melt(skodak_wide, c("id")
)
xx <-melt(skodak_wide, c("id","gender")
)
View(xx)
View(xx)
View(skodak_wide)
View(xx)
?gather
skodak_iq <- gather(data = skodak_wide ,
key = "occasion",
value = "iq",
3:6,)
skodak_iq <- gather(data = skodak_wide ,
key = "occasion",
value = "iq",
3:6)
View(skodak_iq)
skodak_iq <- gather(data = skodak_wide ,
key = "occasion",
value = "iq",
-7:10)
skodak_iq <- gather(data = skodak_wide ,
key = "occasion",
value = "iq",
-c(7:10))
View(skodak_iq)
skodak_iq <-
skodak_wide %>%
gather(key = "occasion",
value = "iq",
3:6)
?select
skodak_iq <-
skodak_wide %>%
gather(key = "occasion",
value = "age",
3:6) %>%
select(-starts_with("iq"))
skodak_iq <-
skodak_wide %>%
gather(key = "occasion",
value = "age",
3:6) %>%
select("id")
library("dplyr")
skodak_iq <-
skodak_wide %>%
gather(key = "occasion",
value = "age",
3:6) %>%
select(-starts_with("iq"))
View(skodak_iq)
skodak_age <-
skodak_wide %>%
gather(key = "occasion",
value = "iq",
7:10) %>%
select(-starts_with("age"))
View(skodak_age)
View(skodak_age)
skodak_age <-
skodak_wide %>%
gather(key = "occasion",
value = "age",
3:6) %>%
select(-starts_with("iq"))
skodak_iq <-
skodak_wide %>%
gather(key = "occasion",
value = "iq",
7:10) %>%
select(-starts_with("age"))
View(skodak_long)
skodak_long <- cbind(skodak_age, skodak_iq)
View(skodak_long)
View(skodak_long)
skodak_long <- cbind(skodak_age, skodak_iq["iq"])
View(skodak_long)
skodak_age <-
skodak_wide %>%
gather(key = "occasion",
value = "age",
3:6,
-starts_with("iq"))
View(skodak_age)
View(skodak_long)
glsREML <- gls(iq ~ age ,
data = skodak_long ,
correlation = corSymm(form = ~ 1 |id),
weights = varIdent(form = ~ 1 | occasion),
method = "REML")
skodak_long_filtered  <- na.omit(skodak_long)
skodak_long_filtered
glsREML <- gls(iq ~ age ,
data = skodak_long_filtered ,
correlation = corSymm(form = ~ 1 |id),
weights = varIdent(form = ~ 1 | occasion),
method = "REML")
summary(glsREML)
df_long  <- within(df_long, {
id <- factor(id)
occasion <- factor(occasion)
})
skodak_long <- within(skodak_long, {
id <- factor(id)
occasion <- factor(occasion)
})
View(skodak_long)
levels(skodak_long$occasion)
levels(skodak_long$occasion) <- c("1", "2", "3", "4")
skodak_age <-
skodak_wide %>%
gather(key = "occasion",
value = "age",
3:6) %>%
select(-starts_with("iq"))
skodak_iq <-
skodak_wide %>%
gather(key = "occasion",
value = "iq",
7:10) %>%
select(-starts_with("age"))
skodak_long <- cbind(skodak_age, skodak_iq["iq"])
# change type of variables into factors
skodak_long <- within(skodak_long, {
id <- factor(id)
occasion <- factor(occasion)
})
#rename levels
levels(skodak_long$occasion) <- c("1", "2", "3", "4")
skodak_long_filtered  <- na.omit(skodak_long)
skodak_long_filtered
glsREML <- gls(iq ~ age ,
data = skodak_long_filtered ,
correlation = corSymm(form = ~ 1 |id),
weights = varIdent(form = ~ 1 | occasion),
method = "REML")
summary(glsREML)
skodak_long_filtered <- arrange(skodak_long_filtered,id)
View(skodak_long_filtered)
skodak_long_filtered  <- skodak_long %>% na.omit() %>%arrange()
View(skodak_long_filtered)
skodak_long_filtered  <- skodak_long %>% na.omit() %>% arrange()
skodak_long_filtered  <- skodak_long %>% na.omit() %>% arrange()
skodak_long_filtered
skodak_long_filtered  <- skodak_long  %>% arrange()
skodak_long_filtered
skodak_long_filtered  <- skodak_long %>% na.omit() %>% arrange(id)
skodak_long_filtered
glsREML <- gls(iq ~ age ,
data = skodak_long_filtered ,
correlation = corSymm(form = ~ 1 |id),
weights = varIdent(form = ~ 1 | occasion),
method = "REML")
summary(glsREML)
