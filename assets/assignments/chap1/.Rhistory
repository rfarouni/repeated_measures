print(cond)
print(p)
return("-")
}
)
return(out)
}
applyToClass <- function(dt, expr) {
e = substitute(expr)
dt[,eval(e),by=is.pos]
}
applyToJunction <- function(dt, expr) {
e = substitute(expr)
dt[,eval(e),by=junction.R1]
}
######## END FUNCTIONS, BEGIN WORK #########
class_input = "/hd2/KNIFE_project_01/reads_ids.txt"
data_out = "/hd2/KNIFE_project_01/glm.RData"
linear_juncp_out = "/hd2/KNIFE_project_01/linearJuncProbs.txt"
circ_juncp_out = "/hd2/KNIFE_project_01/circJuncProbs.txt"
#### SEPARATE READ CLASSES AND PARSE RELEVANT INFO ####
myClasses = processClassInput(class_input)
print(paste("class info processed", dim(myClasses)))
circ_reads = myClasses[(class %like% '1|2|3'), list(id, pos.R1, MQ.R1, ASmean, XN.R1, len.R1, junction.R1)]
circ_reads = addDerivedFields(circ_reads, 1)
decoy_reads = myClasses[(class == '5'), list(id, pos.R1, MQ.R1, ASmean, XN.R1, len.R1, junction.R1)]
decoy_reads = addDerivedFields(decoy_reads, 0)
linear_reads = myClasses[(class %like% '6|7'), list(id, pos.R1, MQ.R1, ASmean, XN.R1, len.R1, junction.R1)]
linear_reads = addDerivedFields(linear_reads, 1)
saves = list()  # to hold all of the glms for future use
max.iter = 2  # number of iterations updating weights and retraining glm
# set up data structure to hold per-junction predictions
junctionPredictions = linear_reads[, .N, by = junction.R1] # get number of reads per junction
setnames(junctionPredictions, "N", "numReads")
setkey(junctionPredictions, junction.R1)
# set up structure to hold per-read predictions
n.neg = nrow(decoy_reads)
n.pos = nrow(linear_reads)
n.reads = n.neg+n.pos
class.weight = min(n.pos, n.neg)
readPredictions = rbindlist(list(linear_reads, decoy_reads))
# set initial weights uniform for class sum off all weights within any class is equal
if (n.pos >= n.neg){
readPredictions[,cur_weight:=c(rep(n.neg/n.pos, n.pos), rep(1, n.neg))]
} else {
readPredictions[,cur_weight:=c(rep(1, n.pos), rep(n.pos/n.neg, n.neg))]
}
readPredictions$junction.R1 <- as.factor(readPredictions$junction.R1)
junctionPredictions = readPredictions[, numReads:=.N, keyby = junction.R1][order(numReads, decreasing = TRUE)]
x <- rbindlist(list(junctionPredictions[is.pos == 0, ][order(numReads, decreasing = TRUE)],junctionPredictions[numReads %in% 100:500,][1:10000,]))
x <- droplevels(x)
xyplot( lenAdjScore ~ overlap , junctionPredictions,
jitter.x = TRUE,
jitter.y = TRUE,
group = factor(is.pos),
auto.key = TRUE,
par.settings = list(superpose.symbol = list(pch = 19, cex = c(1.1,0.2),
col = c("orange", "blue"))))
xyplot(lenAdjScore ~ overlap|junction.R1 , x,
layout=c(10,11),
group = factor(is.pos),
jitter.x = TRUE,
jitter.y = TRUE,
type = c("p","a"),
auto.key = TRUE,
par.settings = list(superpose.symbol =
list(pch = c(19,19),
cex = c(0.3,0.3),
col = c("orange", "blue"))))
xyplot(lenAdjScore ~ MQ.R1 |junction.R1 , x,
layout=c(10,11),
group = factor(is.pos),
jitter.x = TRUE,
jitter.y = TRUE,
type = c("p","a"),
auto.key = TRUE,
par.settings = list(superpose.symbol =
list(pch = c(19,19),
cex = c(0.3,0.3),
col = c("orange", "blue"))))
3200 -1500
df_wide <- read.table("backpain.txt",
header = TRUE,
na.strings = ".")
str(df_wide)
setwd("~/Documents/repos/repeated_measures/assets/assignments/chap1")
library("dplyr")
library("tidyr")
library("ggplot2")
df_wide <- read.table("backpain.txt",
header = TRUE,
na.strings = ".")
df_wide
df_long <- gather(data = df_wide ,
key = "period",
value = "pain",
3:6)
# change type of variables into factors
df_long  <- within(df_long, {
id <- factor(id)
period <- factor(period)
})
df_long
ggplot(data = df_long, aes(x = period , y = pain, group = id)) +
geom_line(aes(colour = id), size = 0.2) +
facet_grid(. ~ site) +
xlab("Follow up Periods") +
ylab("Pain Level") +
ggtitle("Patient Self-reported Back Pain by Administration Site") +
theme(legend.position = "none")
df_long_means <- df_long %>%
group_by(site, id) %>%
summarise(pain_avg = mean(pain,
na.rm = TRUE))
df_long_means
t.test(pain_avg~site,
data = df_long_means,
var.equal = TRUE)
df_long_last <- df_long %>% filter(period == "y4")
df_long_last
t.test(pain ~ site,
data = df_long_last,
var.equal = TRUE)
BPRS_df_wide <- read.table("BPRS_data.txt",
header = TRUE,
na.strings = ".")
BPRS_df_wide
BPRS_df_long <- gather(data = BPRS_df_wide ,
key = "week",
value = "score",
3:11)
# change type of variables into factors
BPRS_df_long  <- within(BPRS_df_long, {
group <- factor(group, labels = c("Group 1", "Group 2"))
id <- factor(id)
week <- factor(week)
})
BPRS_df_long
ggplot(data = BPRS_df_long, aes(x = week , y = score, group = id)) +
geom_line(aes(colour = id), size = 0.2) +
facet_grid(  ~ group) +
xlab("Week") +
ylab("Scores") +
ggtitle("Brief Psychiatric Rating Scale Data")  +
theme(legend.position = "none")
ggplot(data = BPRS_df_long,
aes(x = week ,
y = score,
group = group)) +
geom_point(aes(colour = group),
size = 0.4) +
geom_smooth(method = 'lm', size = 0.1) +
facet_wrap(  ~ id, ncol = 8) +
xlab("Week") +
ylab("Scores") +
ggtitle("Brief Psychiatric Rating Scale Data")   +
theme(axis.text.x = element_text(size = 4))
depression_df_wide <- read.table("depression.txt",
header = TRUE,
na.strings = ".")
depression_df_wide
depression_df_long_months <- gather(data = depression_df_wide ,
key = "period",
value = "score",
5:8)
# change type of variables into factors
depression_df_long_months  <- within(depression_df_long_months, {
group <- factor(group)
id <- factor(id)
period <- factor(period)
})
depression_df_long_months
fit1 <- aov( score ~ period*group + Error(id/period),
data = depression_df_long_months)
summary(fit1)
depression_df_long_baseline <- gather(data = depression_df_wide ,
key = "baseline",
value = "score",
3:4)
# change type of variables into factors
depression_df_long_baseline  <- within(depression_df_long_baseline, {
group <- factor(group)
id <- factor(id)
baseline <- factor(baseline)
})
depression_df_long_baseline
fit2 <- aov( score ~ baseline*group + Error(id/baseline),
data = depression_df_long_baseline)
summary(fit2)
ggplot(data = df_long,
aes(x = period,
y = pain,
group = site)) +
geom_point(aes(colour = site),
size = 0.4) +
geom_smooth(method = 'lm', size = 0.1) +
facet_wrap(  ~ id, ncol = 8) +
xlab("Follow up Periods") +
ylab("Pain Level") +
ggtitle("Patient Self-reported Back Pain by Administration Site") +
theme(axis.text.x = element_text(size = 4))
ggplot(data = df_long,
aes(x = period,
y = pain,
group = site)) +
geom_point(aes(colour = site),
size = 0.4) +
geom_smooth(method = 'lm', size = 0.1) +
facet_wrap(  ~ id, ncol = 9) +
xlab("Follow up Periods") +
ylab("Pain Level") +
ggtitle("Patient Self-reported Back Pain by Administration Site") +
theme(axis.text.x = element_text(size = 4))
ggplot(data = df_long,
aes(x = period,
y = pain,
group = site)) +
geom_point(aes(colour = site),
size = 0.4) +
geom_smooth(method = 'lm', size = 0.1) +
facet_wrap(  ~ id, ncol = 9) +
scale_y_continuous(name = "Human Development Index, 2011 (1=Best)",
limits = c(-100,100))+
xlab("Follow up Periods") +
ylab("Pain Level") +
ggtitle("Patient Self-reported Back Pain by Administration Site") +
theme(axis.text.x = element_text(size = 4))
ggplot(data = df_long,
aes(x = period,
y = pain,
group = site)) +
geom_point(aes(colour = site),
size = 0.4) +
geom_smooth(method = 'lm', size = 0.1) +
facet_wrap(  ~ id, ncol = 9) +
scale_y_continuous(limits = c(-50,100))+
xlab("Follow up Periods") +
ylab("Pain Level") +
ggtitle("Patient Self-reported Back Pain by Administration Site") +
theme(axis.text.x = element_text(size = 4))
table(df_long)
View(df_long)
ggplot(data = df_long,
aes(x = period,
y = pain,
group = site)) +
geom_point(aes(colour = site),
size = 0.4) +
geom_smooth(method = 'lm', size = 0.1) +
facet_wrap(  ~ id, ncol = 9) +
scale_y_continuous(limits = c(-50,100)) +
xlab("Follow up Periods") +
ylab("Pain Level") +
ggtitle("Patient Self-reported Back Pain by Administration Site") +
theme(axis.text.x = element_text(size = 4))
View(df_long)
df_long %>%
group_by(site, id)
df_long %>%
group_by(id)
df_long %>%
group_by(id) %>%
do(fit = lm(period ~ pain, data = .))
df_long %>%
group_by(id) %>%
do(fit = lm(pain ~ period , data = .))
xx <- df_long %>%
group_by(id) %>%
do(fit = lm(pain ~ period , data = .))
View(xx)
as.numeric(df_long$period)
xx <- df_long %>%
group_by(id) %>%
do(fit = lm(pain ~ as.numeric(period), data = .))
View(xx)
xx <- df_long %>%
group_by(id) %>%
do(fit = coef(lm(pain ~ as.numeric(period), data = .)))
View(xx)
tidy(xx)
xx <- df_long %>%
group_by(id) %>%
do(fit = coef(lm(pain ~ as.numeric(period), data = .))['period'])
xx <- df_long %>%
group_by(id) %>%
do(fit = coef(lm(pain ~ as.numeric(period), data = .))[2])
xx <- df_long %>%
group_by(id) %>%
do(fit = coef(lm(pain ~ as.numeric(period), data = .)))
View(xx)
xx <- df_long %>%
group_by(id) %>%
do(slope = coef(lm(pain ~ as.numeric(period), data = .))[2])
View(xx)
df_long %>%
group_by(id, site) %>%
do(slope = coef(lm(pain ~ as.numeric(period), data = .))[2])
xx <- df_long %>%
group_by(id, site) %>%
do(slope = coef(lm(pain ~ as.numeric(period), data = .))[2])
View(xx)
t.test(slope~site,
data = df_slopes,
var.equal = TRUE)
df_slopes <- df_long %>%
group_by(id, site) %>%
do(slope = coef(lm(pain ~ as.numeric(period), data = .))[2])
t.test(slope~site,
data = df_slopes,
var.equal = TRUE)
df_slopes <- df_long %>%
group_by(id, site) %>%
do(slope = coef(lm(pain ~ as.numeric(period), data = .))[[2]])
df_slopes <- df_long %>%
group_by(id, site) %>%
do(slope = unname(coef(lm(pain ~ as.numeric(period), data = .))[[2]]))
df_slopes <- df_long %>%
group_by(id, site) %>%
do(slope = unlist(coef(lm(pain ~ as.numeric(period), data = .))[[2]]))
df_slopes <- df_long %>%
group_by(id, site) %>%
do(slope = coef(lm(pain ~ as.numeric(period), data = .))[[2]])
View(df_slopes)
df_slopes <- df_long %>%
group_by(id, site) %>%
do(slope = as.numeric(coef(lm(pain ~ as.numeric(period), data = .))[[2]]))
View(df_slopes)
df_slopes <- df_long %>%
group_by(id, site) %>%
do(slope = unlist((coef(lm(pain ~ as.numeric(period), data = .))[[2]])))
df_slopes <- df_long %>%
group_by(id, site) %>%
unlist(do(slope = coef(lm(pain ~ as.numeric(period), data = .))[[2]]))
df_slopes <- df_long %>%
group_by(id, site) %>%
do(slope = coef(lm(pain ~ as.numeric(period), data = .))[[2]])
View(df_slopes)
xx <-df_slopes$slope
xx <-unlist(df_slopes$slope)
df_slopes <- df_long %>%
group_by(id, site) %>%
do(slope = coef(lm(pain ~ as.numeric(period), data = .))[[2]][1])
coef(lm(pain ~ as.numeric(period), data = df_long))[[2]]
xx <-coef(lm(pain ~ as.numeric(period), data = df_long))[[2]]
xx <-coef(lm(pain ~ as.numeric(period), data = df_long))[2]
df_slopes <- df_long %>%
group_by(id, site) %>%
do(slope = coef(lm(pain ~ as.numeric(period), data = .))[[2]])
t.test(slope~site,
data = df_slopes,
var.equal = TRUE)
df_slopes <- df_long %>%
group_by(id, site) %>%
do(slope = t(coef(lm(pain ~ as.numeric(period), data = .))[[2]]))
df_slopes <- df_long %>%
group_by(id, site) %>%
do(slope = coef(lm(pain ~ as.numeric(period), data = .))[[2]])
df_slopes  <- within(df_slopes, {
slope <- as.numeric(slope)
})
t.test(slope~site,
data = df_slopes,
var.equal = TRUE)
t.test(slope~site,
data = df_slopes)
df_slopes <- df_long %>%
group_by(id, site) %>%
do(data.frame(slope = coef(lm(pain ~ as.numeric(period), data = .))[[2]]))
View(df_slopes)
df_slopes <- df_long %>%
group_by(id, site) %>%
do() %>%
data.frame(slope = coef(lm(pain ~ as.numeric(period), data = .))[[2]])
df_slopes <- df_long %>%
group_by(id, site) %>%
do(.) %>%
data.frame(slope = coef(lm(pain ~ as.numeric(period), data = .))[[2]])
df_slopes <- df_long %>%
group_by(id, site) %>%
do(data.frame(slope = coef(lm(pain ~ as.numeric(period), data = .))[[2]]))
df_slopes <- BPRS_df_long %>%
group_by(id, group) %>%
do(data.frame(slope = coef(lm(score ~ as.numeric(week), data = .))[[2]]))
df_slopes_means <- df_slopes %>%
group_by(group, id) %>%
summarise(slopes_avg = mean(slope,
na.rm = TRUE))
df_slopes_means
t.test(slopes_avg~group,
data = df_long_means,
var.equal = TRUE)
df_slopes_means
t.test(slopes_avg~group,
data = df_long_means,
var.equal = TRUE)
df_slopes_means <- df_slopes %>%
group_by(group, id) %>%
summarise(slopes_avg = mean(slope,
na.rm = TRUE))
df_slopes_means <- df_slopes %>%
group_by(group, id) %>%
summarise(slopes_avg = mean(slope,na.rm = TRUE))
t.test(slopes_avg ~ group,
data = df_long_means,
var.equal = TRUE)
t.test(slopes_avg ~ group,
data = df_slopes_means,
var.equal = TRUE)
View(df_slopes_means)
library("dplyr")
library("tidyr")
library("ggplot2")
df_wide <- read.table("backpain.txt",
header = TRUE,
na.strings = ".")
df_wide
df_long <- gather(data = df_wide ,
key = "period",
value = "pain",
3:6)
# change type of variables into factors
df_long  <- within(df_long, {
id <- factor(id)
period <- factor(period)
})
df_long
ggplot(data = df_long, aes(x = period , y = pain, group = id)) +
geom_line(aes(colour = id), size = 0.2) +
facet_grid(. ~ site) +
xlab("Follow up Periods") +
ylab("Pain Level") +
ggtitle("Patient Self-reported Back Pain by Administration Site") +
theme(legend.position = "none")
df_long_means <- df_long %>%
group_by(site, id) %>%
summarise(pain_avg = mean(pain,
na.rm = TRUE))
df_long_means
t.test(pain_avg~site,
data = df_long_means,
var.equal = TRUE)
df_long_last <- df_long %>% filter(period == "y4")
df_long_last
t.test(pain ~ site,
data = df_long_last,
var.equal = TRUE)
BPRS_df_wide <- read.table("BPRS_data.txt",
header = TRUE,
na.strings = ".")
BPRS_df_wide
BPRS_df_long <- gather(data = BPRS_df_wide ,
key = "week",
value = "score",
3:11)
# change type of variables into factors
BPRS_df_long  <- within(BPRS_df_long, {
group <- factor(group, labels = c("Group 1", "Group 2"))
id <- factor(id)
week <- factor(week)
})
BPRS_df_long
ggplot(data = BPRS_df_long, aes(x = week , y = score, group = id)) +
geom_line(aes(colour = id), size = 0.2) +
facet_grid(  ~ group) +
xlab("Week") +
ylab("Scores") +
ggtitle("Brief Psychiatric Rating Scale Data")  +
theme(legend.position = "none")
ggplot(data = BPRS_df_long,
aes(x = week ,
y = score,
group = group)) +
geom_point(aes(colour = group),
size = 0.4) +
geom_smooth(method = 'lm', size = 0.1) +
facet_wrap(  ~ id, ncol = 8) +
xlab("Week") +
ylab("Scores") +
ggtitle("Brief Psychiatric Rating Scale Data")   +
theme(axis.text.x = element_text(size = 4))
depression_df_wide <- read.table("depression.txt",
header = TRUE,
na.strings = ".")
depression_df_wide
depression_df_long_months <- gather(data = depression_df_wide ,
key = "period",
value = "score",
5:8)
# change type of variables into factors
depression_df_long_months  <- within(depression_df_long_months, {
group <- factor(group)
id <- factor(id)
period <- factor(period)
})
depression_df_long_months
fit1 <- aov( score ~ period*group + Error(id/period),
data = depression_df_long_months)
summary(fit1)
depression_df_long_baseline <- gather(data = depression_df_wide ,
key = "baseline",
value = "score",
3:4)
# change type of variables into factors
depression_df_long_baseline  <- within(depression_df_long_baseline, {
group <- factor(group)
id <- factor(id)
baseline <- factor(baseline)
})
depression_df_long_baseline
fit2 <- aov( score ~ baseline*group + Error(id/baseline),
data = depression_df_long_baseline)
summary(fit2)
